<project name="Compiler" default="jar" basedir=".">
  <!-- Manually generated java files -->
  <property name="src"     location="src"     />
  <!-- Auto-generated java files -->
  <property name="java"    location="java"    />
  <!-- Target Dir for compile -->
  <property name="classes" location="classes" />
  <!-- Jar directory -->
  <property name="dist"    location="dist"    />
  <!-- Runtime libraries -->
  <property name="lib"     location="lib"     />
  <!-- Binaries for tools, etc. -->
  <property name="bin"     location="bin"     />

  <!-- Build up a path structure for a classpath 
       that includes the binaries (jars) in bin/ and 
       the existing classpath.  Not used now, 
       because the jflex and cup task define their own cp, 
       but could come in handly later. -->
  <path id="binaries">
    <pathelement location="${bin}" />
    <fileset dir="${bin}">
      <include name="**/*.jar" />
      <include name="**/*.zip" />
    </fileset>
    <pathelement path="${java.class.path}" />
    <pathelement path="${classes}" />
  </path>

  <!-- Build up a path structure for a classpath 
       that includes the libraries and the existing classpath -->
  <path id="libraries">
    <pathelement location="${lib}" />
    <fileset dir="${lib}">
      <include name="**/*.jar" />
      <include name="**/*.zip" />
    </fileset>
    <pathelement path="${java.class.path}" />
  </path>

  <target name="init">
    <mkdir dir="${classes}"/>
    <mkdir dir="${java}"/>
    <mkdir dir="${dist}"/>
    <mkdir dir="${java}/decaf"/>
  </target>



    <target name="clean-generated-sources">
        <delete failonerror="true" includeemptydirs="true">
            <fileset dir="${basedir}" includes="src/**/generated/**"/>
        </delete>
    </target>

    <!--
    <target name="clean" depends="init-complete-artifact,clean-generated-sources">
        <delete file="${complete-artifact.file}"/>
    </target>
    -->
    <target name="antlr4-up-to-date">
        <uptodate targetfile="${antlr4.touch}" property="is.antlr4.uptodate">
	    <srcfiles dir="${src}/decaf">
                <include name="**/*.g4"/>
                <include name="**/*.tokens"/>
                <exclude name="**/generated/**"/>
            </srcfiles>
        </uptodate>
    </target>

    <!-- we don't download this, we just keep it static, so force it to be true -->
    <property name="is.jar.uptodate" value="true" />

    <target name="up-to-date" depends="antlr4-up-to-date">
        <condition property="is.all.uptodate">
            <and>
                <istrue value="${is.jar.uptodate}"/>
                <istrue value="${is.antlr4.uptodate}"/>
            </and>
        </condition>

        <scriptdef name="propertyreset" language="javascript"
                   description="Allows to assign @{property} new value">
            <attribute name="name"/>
            <attribute name="value"/>
            project.setProperty(attributes.get("name"), attributes.get("value"));
        </scriptdef>

        <propertyreset name="${is.jar.uptodate}" value="${is.all.uptodate}" />
    </target>

    <target name="compile" depends="init,up-to-date,antlr4" unless="is.jar.uptodate" />

    <property name="antlr4.jar" value="antlr-4.7.2-complete.jar" />
    <path id="cp.antlr4">
	    <pathelement location="${lib}/${antlr4.jar}"/>
            <pathelement location="${antlr4_runtime.jar}"/>
            <pathelement location="${st4.jar}"/>
            <pathelement location="${antlr3_runtime.jar}"/>
    </path>

    <macrodef name="antlr4">
        <attribute name="srcpath"/>
        <element name="args" optional="true"/>
        <sequential>
            <local name="package"/>
            <local name="paths.antlr4.local"/>
            <pathconvert property="package" dirsep=".">
                <path location="${src}/@{srcpath}"/>
                <map from="${src}/" to=""/>
            </pathconvert>
            <path id="sources.antlr4.@{srcpath}">
                <fileset dir="${src}/@{srcpath}" includes="*.g4"/>
            </path>
            <pathconvert property="paths.antlr4.local" refid="sources.antlr4.@{srcpath}" pathsep=" ">
                <map from="${src}/@{srcpath}/" to=""/>
            </pathconvert>
            <java classname="org.antlr.v4.Tool" fork="true" failonerror="true" dir="${src}/@{srcpath}">
                <arg value="-o"/>
                <arg value="generated"/>
                <arg value="-package"/>
                <arg value="${package}.generated"/>
                <args/>
                <arg line="${paths.antlr4.local}"/>
                <classpath>
                    <path refid="cp.antlr4"/>
                    <pathelement location="${java.class.path}"/>
                </classpath>
            </java>
        </sequential>
    </macrodef>

    <target name="antlr4" depends="antlr4-up-to-date" unless="is.antlr4.uptodate">
        <path id="sources.antlr4">
            <fileset dir="${src}" includes="**/*.g4"/>
        </path>
        <pathconvert pathsep="${line.separator}  " property="echo.sources.antlr4" refid="sources.antlr4">
            <map from="${src}/" to=""/>
        </pathconvert>
        <echo message="Generating ANTLR 4 grammars:${line.separator}  ${echo.sources.antlr4}"/>

        <parallel threadsperprocessor="1" failonany="true">
		<antlr4 srcpath="decaf/scanner">
                <args>
                    <arg value="-visitor"/>
                    <arg value="-Xforce-atn"/>
                </args>
            </antlr4>
	    <!--
	    <antlr4 srcpath="decaf/parser">
                <args>
                    <arg value="-visitor"/>
                    <arg value="-Xforce-atn"/>
                </args>
	</antlr4>
	-->
        </parallel>

        <touch file="${antlr4.touch}" mkdirs="true"/>
    </target>

  <!-- copy manual edited sources to automatically generated ones -->
  <target name="copy_src" depends="init">
   <copy todir="${java}">
     <fileset dir="${src}" includes="**/**.java" />
   </copy>
  </target>

  <!--
  <target name="compile" depends="parser">
    <javac srcdir="${java}:${src}" destdir="${classes}" includeantruntime="true" debug="on">
      <classpath refid="libraries"/>
    </javac>
  </target>
  -->
  <target name="jar" depends="compile">
    <jar jarfile="${dist}/Compiler.jar" basedir="${classes}">
     <manifest>
       <attribute name="Main-Class" value="decaf.Main" />
       <!-- ANTLR runtime is needed for parsing! -->
       <attribute name="Class-Path" value="antlr.jar" />
     </manifest>
    </jar>
    <!-- Third party libraries can only be found by java -jar if they reside in the same dir -->
    <copy todir="${dist}">
	<fileset dir="${lib}" includes="**/**.jar"/>
    </copy>
  </target>
  
 <!-- to clean, delete everything in the java, classes, and dist
  directory -->
  <target name="clean">
     <delete dir="${java}" />
     <delete dir="${classes}" />
     <delete dir="${dist}" />
  </target>

</project>
